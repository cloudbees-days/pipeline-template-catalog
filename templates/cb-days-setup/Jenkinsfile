/*
* 1. Create/clone user specific CB Days repos - core-config-bundle, apps?
* 2. Generate config bundle based on user's Jenkins encrypted GitHub PAT.
*    a. Jenkins credentials for GitHub global config and Pipeline Multibranch projects.
*    b. GitHub  global config with support for managing webhooks.
* 3. Copy config bundle to CJOC.
* 4. Create Pipeline Policy on Team Master.
*/
def masterName = System.properties.'MASTER_NAME'
def encryptedPAT = new hudson.util.Secret(githubPAT).getEncryptedValue()
def entrySecret = UUID.randomUUID().toString()

pipeline {
  agent {
    kubernetes {
      label 'kubectl'
      yaml """
kind: Pod
metadata:
  name: kubectl
spec:
  serviceAccountName: jenkins
  containers:
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    resources:
      requests:
        memory: "500Mi"
    command:
    - cat
    tty: true
  securityContext:
    runAsUser: 1000  
      """
    }
  }
  stages {
    stage('Fork Repos') {
      steps {
        echo "GitHub Username:  ${githubUsername}"
        echo "GitHub Organization: ${githubOrg}"
        sh(script: """
          curl --silent -H "Authorization: token $githubPAT" --data '{"organization":"${githubOrg}"}' https://api.github.com/repos/cloudbees-days/core-config-bundle/forks
          curl --silent -H "Authorization: token $githubPAT" --data '{"organization":"${githubOrg}"}' https://api.github.com/repos/cloudbees-days/microblog-frontend/forks
          curl --silent -H "Authorization: token $githubPAT" --data '{"organization":"${githubOrg}"}' https://api.github.com/repos/cloudbees-days/microblog-backend/forks
         """)
      }
    }
    stage('Create Pipeline Policy') {
      steps {
        echo "preparing to create Pipeline Policy on ${masterName}"
        sh "curl -O https://raw.githubusercontent.com/cloudbees-days/pipeline-library/master/resources/pipeline-policies/global-timeout.json"
        echo "preparing Jenkins CLI for Master restart"
        sh "curl -O http://teams-${masterName}/teams-${masterName}/jnlpJars/jenkins-cli.jar"
        withCredentials([usernamePassword(credentialsId: 'cli-username-token', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          sh """
            alias cli='java -jar jenkins-cli.jar -s \'http://teams-${masterName}/teams-${masterName}/\' -auth $USERNAME:$PASSWORD'
            echo "Creating global-timeout Pipeline Policy on ${masterName}"
            cli policies --put < global-timeout.json
          """
        }
      }
    }
    stage('Create Config Bundle') {
      steps {
        echo "master name:  ${masterName}"
        echo "encrypted token: ${encryptedPAT}"
        sh(script: """
            git init
            git config user.email "deployBot@cb-sa.io"
            git config user.name "${githubUsername}"
            git remote add origin https://${githubUsername}:${githubPAT}@github.com/${githubOrg}/core-config-bundle.git
            git pull origin master
            sed -i.bak 's#REPLACE_WITH_JENKINS_ENCODED_PAT#${encryptedPAT}#' jenkins.yaml
            sed -i.bak 's#REPLACE_WITH_YOUR_GITHUB_USERNAME#${githubUsername}#' jenkins.yaml
            git add *
            git commit -a -m 'updating ${githubOrg}/core-config bundle with encrypted GitHub PAT and GitHub Username'
            git push -u origin master
        """)
        container('kubectl') {
          sh "mkdir ${masterName}"
          sh "cp *.yaml ${masterName}"
          sh "kubectl cp --namespace ${k8sNamespace} ${masterName} cjoc-0:/var/jenkins_home/jcasc-bundles-store/"
          sh "kubectl exec --namespace ${k8sNamespace} cjoc-0 -- sed -i \"/<\\/access>/i\\<entry><string>${masterName}</string><hudson.util.Secret>${entrySecret}</hudson.util.Secret></entry>\"  /var/jenkins_home/jcasc-bundles-store/security.xml"
        }
        withCredentials([usernamePassword(credentialsId: 'cli-username-token', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          sh """
            alias cli='java -jar jenkins-cli.jar -s \'http://cjoc/cjoc/\' -auth $USERNAME:$PASSWORD'
            echo "Reprovision Master ${masterName}"
            cli managed-master-reprovision ${masterName}
          """
        }
      }
    }
  }
}